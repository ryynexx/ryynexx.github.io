[{"content":"Tired of the traditional content management system (CMS)? Hugo is your way out to an easier, faster, more flexible, and powerful static site generator (SSG) available today. Hugo is known for its unparalleled speed. Whether you\u0026rsquo;re a developer, blogger, or entrepreneur, Hugo empowers you to create and manage high-performance websites effortlessly. In this blog, you\u0026rsquo;ll get to know Hugo\u0026rsquo;s key features, how to get started with your website on Hugo, and its deployment to GitHub.\nWhy Choose Hugo? The reason why Hugo is so popular and why you should work with it lies in its key features:\nLightning-Fast: Hugo builds your entire website in mere seconds, ensuring your site works smoothly no matter the size. Effortless Setup: Say goodbye to databases and complicated installations‚ÄîHugo runs locally and deploys seamlessly on platforms like GitHub Pages, Netlify, and Vercel with minimal setup. Markdown Support: Your content creation becomes simple and quick with Markdown support. Customizable and Flexible: Supports a vast collection of templates and themes, allowing you to design your site to match your style with easy customization. SEO \u0026amp; Performance Optimized: With built-in features like automatic sitemaps, clean URLs, and structured data, Hugo helps boost your website‚Äôs search engine rankings and ensures optimal performance. Easy Content Management: Makes content organization a breeze, giving you full control over your site‚Äôs structure. How to Get Started with Your Site on Hugo Starting with Hugo is straightforward and quick. Follow these steps:\n1- Install Hugo On Linux sudo snap install hugo On macOS brew install hugo On Windows Download the Windows binary from Hugo\u0026rsquo;s official releases. 2- Create a New Site Creating your site is a breeze:\nhugo new site my-website cd my-website This will generate your new Hugo site.\n3- Apply a Theme Look for a theme you like on Hugo Themes then clone it with:\ngit init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/hugo-PaperMod Then update your config.toml file:\ntheme = \u0026#34;theme-name\u0026#34; 4- Create Content Create your first post using:\nhugo new posts/first-post.md Edit the Markdown file in content/posts and add your content.\n5- Preview on Local Server Run the Hugo server to check out your site:\nhugo server --noHTTPCache Go to http://localhost:1313 to see your site in action.\n6- Build Static Files for Deployment Run:\nhugo This will create a public/ folder containing your static HTML files.\nDeploy Your Site on GitHub Pages 1- Create a Repository for Your Site Go to GitHub. Create a new repository. Set the name of the repository to yourusername.github.io. 2- Create GitHub Actions Workflow Create a workflow directory and .yaml configuration file in your Hugo site directory.\nmkdir -p .github/workflows cd .github/workflows touch hugo.yaml 3- Add Configurations Edit hugo.yaml:\nname: Deploy Hugo site to Pages on: push: branches: - master workflow_dispatch: permissions: contents: read pages: write id-token: write concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false defaults: run: shell: bash jobs: build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.145.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout Repository uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup GitHub Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js Dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build Hugo Site env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production run: | hugo --gc --minify --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload Site Artifacts uses: actions/upload-pages-artifact@v3 with: path: ./public deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 4- Push and Deploy Your Website on GitHub Run the following commands:\nNote: Run these commands in your main Hugo site directory\ngit add . git commit -m \u0026#34;Initial commit\u0026#34; git remote add origin https://github.com/YOUR_GITHUB_USERNAME/YOUR_GITHUB_REPO.git git push -u origin master Note: Copy the git remote file from your GitHub repository.\n5- Configure the Repository Pages Settings Go to \u0026lsquo;Settings\u0026rsquo; of your repository. Enter the \u0026lsquo;Pages\u0026rsquo; section. Change the \u0026lsquo;source\u0026rsquo; to GitHub Actions. 6- Check Deployment Status In your GitHub repository, navigate to Actions from the main menu. Look for the workflow named Deploy Hugo site to Pages. Once the deployment is complete, the status indicator should turn green. 7- View Your Site Visit your site at:\nhttps://yourusername.github.io/ Congratulations! Your Site is Now Live! Conclusion Hugo is a game-changer for anyone looking to build a fast, scalable, and visually stunning website with minimal effort. Whether you\u0026rsquo;re creating a blog, portfolio, or business site, Hugo‚Äôs speed and simplicity make it an unbeatable choice. Start your Hugo journey today and experience the future of web development!\n","permalink":"http://localhost:1313/posts/hugo_site/","summary":"\u003cp\u003eTired of the traditional content management system (CMS)? Hugo is your way out to an easier, faster, more flexible, and powerful static site generator (SSG) available today. Hugo is known for its unparalleled speed. Whether you\u0026rsquo;re a developer, blogger, or entrepreneur, Hugo empowers you to create and manage high-performance websites effortlessly. In this blog, you\u0026rsquo;ll get to know Hugo\u0026rsquo;s key features, how to get started with your website on Hugo, and its deployment to GitHub.\u003c/p\u003e","title":"Create, Customize, and Deploy ‚Äì Your Hugo Website in No Time!"},{"content":" Introduction In the world of coding, keeping track of changes, collaborating with fellow developers, and ensuring that you never lose progress is crucial. That\u0026rsquo;s where Git and GitHub come in! Whether you\u0026rsquo;re a beginner or an experienced coder, mastering these tools can streamline your workflow and make software development a breeze.\nIn this blog, we‚Äôll dive deep into what Git and GitHub are, why they‚Äôre important, and how to get started. Let\u0026rsquo;s explore the power of version control!\nWhat is GitHub? GitHub is an online version control platform that allows developers to store, track, and collaborate on coding projects. It acts as a hub where programmers can work together, contribute to open-source projects, and manage software efficiently.\nWhy Use GitHub? Have you ever edited a file, only to realize later that the previous version was better‚Äîbut now it\u0026rsquo;s lost forever? üò± That‚Äôs where GitHub saves the day! With GitHub, you can:\nTrack every version of your files so you never lose progress. Revert to an older version anytime if something goes wrong. Work with a team effortlessly using collaboration tools like pull requests and issues. Store your code safely in the cloud, preventing data loss. üí° Fun Fact: GitHub is home to millions of open-source projects and developers worldwide, making it one of the largest developer communities! üöÄ\nGetting Started with GitHub To get started with GitHub:\nSign up at GitHub.com üìù Set up your profile (add a picture, bio, and links) Explore repositories and start collaborating! Once you\u0026rsquo;re inside GitHub, you\u0026rsquo;ll come across some essential terms:\nRepository (Repo): A folder that contains your project\u0026rsquo;s files and their history. Branch: A separate version of your project where you can make changes without affecting the main version. Commit: A snapshot of your changes, like saving progress in a game. Push: Uploading changes from your local computer to GitHub. Merge: Combining changes from one branch into another. Issue: A way to track bugs, feature requests, and improvements. Personal Access Token: A secure authentication key used instead of a password for Git operations. How Git and GitHub Work Together GitHub is a web-based service, but Git is the command-line tool that powers it. Git is a distributed version control system that allows you to:\nTrack changes in files Work on different branches simultaneously Merge and collaborate on projects Keep a local copy of your entire repository Think of Git as the engine and GitHub as the user-friendly interface where everything is stored and shared! üöÄ\nHow to Use Git? To use Git, follow these steps:\n1Ô∏è Install Git On Linux:\nsudo apt-get install git On macOS:\nbrew install git On Windows:\nDownload and install from git-scm.com After installing, check if it is available:\ngit --version 2Ô∏è Set Up Git After installation, configure your Git identity:\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your.email@example.com\u0026#34; To verify your identity, run:\ngit config --list 3Ô∏è Create a GitHub Repository Go to GitHub and click New Repository Give it a name and choose public or private Copy the repository URL 4Ô∏è Clone the Repository Locally git clone https://github.com/your-username/your-repo.git 5Ô∏è Make Changes and Commit Modify files, then track and save changes:\ngit add . # Stages all changes git commit -m \u0026#34;Added a new feature\u0026#34; 6Ô∏è Push Changes to GitHub git push -u origin main Your code is now live on GitHub! üéâ\nConclusion Git and GitHub are powerful tools that every developer should master. By learning how to manage repositories, work with branches, and collaborate through pull requests, you can boost your productivity and coding efficiency.\nSo, what‚Äôs next? Create your first repository, explore GitHub, or contribute to an open-source project! üöÄ\n","permalink":"http://localhost:1313/posts/git_github/","summary":"\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn the world of coding, keeping track of changes, collaborating with fellow developers, and ensuring that you never lose progress is crucial. That\u0026rsquo;s where \u003cstrong\u003eGit\u003c/strong\u003e and \u003cstrong\u003eGitHub\u003c/strong\u003e come in! Whether you\u0026rsquo;re a beginner or an experienced coder, mastering these tools can \u003cstrong\u003estreamline your workflow\u003c/strong\u003e and make software development a breeze.\u003c/p\u003e\n\u003cp\u003eIn this blog, we‚Äôll dive deep into \u003cstrong\u003ewhat Git and GitHub are, why they‚Äôre important, and how to get started\u003c/strong\u003e. Let\u0026rsquo;s explore the power of version control!\u003c/p\u003e","title":"Hack Your Productivity with Git \u0026 GitHub: A Must-Read Guide"},{"content":"my first post\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003cp\u003emy first post\u003c/p\u003e","title":"My First Post"},{"content":"","permalink":"http://localhost:1313/about/","summary":"about","title":"About Me"}]
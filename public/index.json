[{"content":"Ever wondered how your operating system, the very foundation of your digital world, comes to life? At its heart lies the kernel, the core program that manages your computer\u0026rsquo;s resources, from the CPU and memory to peripherals. While most users interact with their OS through a user-friendly interface, the kernel operates behind the scenes, diligently orchestrating everything.\nBut how does this essential piece of software get built and tailored to your specific hardware? The answer lies in kernel compilation.\nFor many, the term \u0026ldquo;kernel compilation\u0026rdquo; might sound intimidating, conjuring images of arcane command-line incantations and hours spent staring at scrolling text. And while it can indeed be a deep dive, the underlying principles are quite logical, and the benefits of a custom-built kernel can be significant.\nWhat Is Kernel Compilation? Kernel compilation is the process of building the operating system kernel from its source code into a binary form that your computer can run. The kernel is the core part of an operating system, responsible for managing hardware, memory, processes, and system calls.\nWhy Compile Your Own Kernel? You might be asking yourself, \u0026ldquo;Why bother compiling a kernel when my distribution already provides one?\u0026rdquo; That\u0026rsquo;s a valid question. For most everyday users, the generic kernels provided by distributions work perfectly well. However, there are compelling reasons why one might venture down the path of compilation:\nAdding or Removing Hardware Support Generic kernels are built with a wide array of drivers to support diverse hardware. However, if you have very specific or older hardware, or conversely, want to strip out support for devices you\u0026rsquo;ll never use, compiling your own kernel allows you to precisely add or remove hardware support. This ensures your kernel only includes the necessary drivers.\nEnabling or Disabling Specific Features The Linux kernel is highly modular, offering a vast range of features. Compilation grants you the power to enable or disable specific features according to your needs. This could involve enabling advanced networking protocols, file system options, or security enhancements that aren\u0026rsquo;t active by default. Conversely, you might want to disable features you deem unnecessary or potentially insecure.\nApplying Patches or Security Fixes Sometimes, crucial patches or security fixes are released for the kernel that haven\u0026rsquo;t yet made their way into your distribution\u0026rsquo;s stable releases. Compiling your own kernel allows you to apply these updates promptly, ensuring your system is up-to-date and secure.\nOptimizing for Performance or Size By compiling a kernel specifically for your hardware, you can enable optimizations that aren\u0026rsquo;t present in a generic build. This can lead to noticeable improvements in performance and responsiveness. Furthermore, selecting only the necessary drivers and features results in a smaller kernel size, potentially lowering memory usage and boot times.\nLearning and Experimentation The process of compiling a kernel provides invaluable insight into the inner workings of your operating system and the hardware it interacts with. It\u0026rsquo;s a fantastic way to deepen your learning and understanding of computer science. For developers and enthusiasts, compiling custom kernels opens doors for experimentation with new features, patches, and kernel versions.\nLet Us Go Down the Path of Kernel Compilation This blog will provide you with an overview of how kernel compilation works.\nStep 1: Completing Requirements To compile your kernel, your system requires some essential tools, libraries, and headers. To get those for your system, run the following commands:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y This ensures that the packages we are downloading are in their latest updated versions.\nsudo apt install -y build-essential libncurses-dev flex bison libelf-dev libssl-dev This command is for Debian-based distributions like Ubuntu.\nStep 2: Kernel Source Before getting your kernel source, let’s first find out your current kernel version and the number of processors your system has:\nuname -r nproc To get the latest stable version of the Linux kernel, visit:\nhttps://kernel.org\nDownload the latest stable version of the Linux kernel source in tarball (.tar.xz) format.\nStep 3: Extraction of the Source Extract the kernel source:\ntar xf linux-6.9.2.tar.xz cd linux-6.9.2 Before moving to the next step, use the command:\nmake mrproper This command is a clean-up command used in the Linux kernel build system — it removes all generated files, configuration files, and backups to return the source tree to a pristine, freshly-unpacked state.\nNote: You use make mrproper before kernel compilation mainly to ensure a clean, reliable build environment — avoiding issues caused by leftover files from previous builds.\nStep 4: Kernel Configuration There are three ways to configure your kernel:\n1. Default Configuration Use this method if you are just trying out kernel compilation or if you need your kernel to configure without any hassle. It uses default configurations recommended by the kernel maintainers:\nmake defconfig 2. Use Old Kernel Config If you want to copy the configurations of your older kernel and update those configurations for the new kernel options, use:\nmake oldconfig 3. Manual Configuration If you want to configure your kernel manually to modify it as needed, use:\nmake menuconfig This will pop up a text based menu for kernel configurations that you can set up according to your preferences.\nStep 5: Building the Kernel To build the kernel, run:\nmake -j$(nproc) This tells make to run up to the number of jobs equal to the number of processors. If you have a number of them, use them all.\nThis might take some time, but if everything goes well, your patience will be rewarded.\nStep 6: Installation To install the kernel modules, run:\nsudo make modules_install To install the kernel, run:\nsudo make install Step 7: GRUB Modification Customize the GRUB bootloader by increasing the GRUB timeout.\nMake sure these lines are set in /etc/default/grub:\nGRUB_TIMEOUT=5 GRUB_TIMEOUT_STYLE=menu After customizing, update GRUB with:\nsudo update-grub Step 8: Testing Reboot your system to test your new kernel. Once rebooted, run:\nuname -r To check the version.\nDone: You Have Compiled and Booted Your Own Kernel Congratulations. You have successfully compiled and installed a Linux kernel from source. Now you can:\nTweak performance Add support for niche hardware Try experimental kernel features Gain a deeper understanding of Linux ","permalink":"http://localhost:1313/posts/kernel_compilation/","summary":"\u003cp\u003eEver wondered how your operating system, the very foundation of your digital world, comes to life? At its heart lies the kernel, the core program that manages your computer\u0026rsquo;s resources, from the CPU and memory to peripherals. While most users interact with their OS through a user-friendly interface, the kernel operates behind the scenes, diligently orchestrating everything.\u003c/p\u003e\n\u003cp\u003eBut how does this essential piece of software get built and tailored to your specific hardware? The answer lies in kernel compilation.\u003c/p\u003e","title":"Demystifying the Kernel: A Journey into Compilation"},{"content":"In today’s interconnected world, secure access to remote systems is a game-changer for administrators, developers, and IT professionals. Secure Shell (SSH) stands as the ultimate tool for establishing encrypted connections to remote machines over an unsecured network. This blog will walk you through SSH’s core concepts, its working mechanism, and how to make the most of it.\nWhat is SSH? SSH, or Secure Shell, is a cryptographic network protocol designed to enable secure communication between two devices. It replaces outdated protocols like Telnet and FTP, which transmit data in plain text, leaving them vulnerable to eavesdropping and cyber threats. With SSH, all data is encrypted, ensuring both privacy and security during transmission.\nHow Does SSH Work? SSH operates on a client-server model. Here’s a simple breakdown of how it functions:\nClient Initiation: The SSH client initiates a secure connection request to the SSH server. Authentication: The server verifies the client\u0026rsquo;s identity through passwords or SSH key authentication. Encryption: Once authenticated, SSH encrypts the session using secure algorithms like AES or ChaCha20. Secure Interaction: Users can now execute remote commands, transfer files, and establish tunneling, all within a protected environment. Fun Fact: The default SSH port is 22, but security-conscious users often change it to something else to prevent automated attacks!\nSetting Up a Secure SSH Connection Before establishing an SSH connection, ensure both your local and remote devices have an SSH server and client installed. On Linux-based systems, OpenSSH is the go-to open-source tool, accessible through the terminal.\nInstalling the SSH Client To install the SSH client on Debian-based or Ubuntu systems, open the terminal and run:\nsudo apt-get install openssh-client To confirm successful installation, type:\nssh Once installed, you can securely connect to any active SSH server.\nInstalling the SSH Server For remote access, the target device must have an SSH server installed and actively running to accept connections.\nTo install the SSH server, use:\nsudo apt-get install openssh-server To check if the SSH server is running, enter:\nsudo systemctl status sshd Once the SSH server is up and running, your device is ready to accept remote connections.\nEstablishing an SSH Connection Open a terminal on your local machine. Retrieve the IP address of your remote system by running: ip a Use the following command, replacing \u0026lt;your_username\u0026gt; and \u0026lt;host_ip_address\u0026gt; with the actual values: ssh your_username@host_ip_address If your local and remote usernames match, simply use:\nssh host_ip_address Press Enter, then provide the password when prompted. Note: Both the client and server devices must be on the same network for a successful connection.\nSuccess! You’re Now Securely Connected! Congratulations! You have now successfully established a secure SSH connection to the remote server.\nPasswordless SSH Login: Speed and Security Combined Tired of typing your password every time you connect via SSH? You can streamline the process and enhance security by setting up passwordless SSH login using SSH key pairs. This method eliminates the need to enter your password repeatedly while still maintaining a secure connection.\nHow Does It Work? SSH key authentication works by generating a pair of cryptographic keys:\nPrivate Key: Stays securely on your local machine. Public Key: Placed on the remote server. When you attempt to connect, the remote server uses your public key to verify your private key without exposing any credentials.\nSteps to Set Up Passwordless SSH Generate SSH Key Pair on Your Local Machine\nRun the following command:\nssh-keygen -t ed25519 -C \u0026#34;SShkey\u0026#34; Copying the Public Key to the Remote Server There are several ways to copy your public key to the remote server. One convenient method, if you have password-based SSH access already configured, is to use the ssh-copy-id command:\nssh-copy-id your_username@host_ip_address Replace your_username and host_ip_address with your remote username and the IP address of the remote server. You will be prompted for your password on the remote server. This command will append your public key to the ~/.ssh/authorized_keys file on the remote server.\nLogging in Without a Password Once the public key is successfully copied to the remote server\u0026rsquo;s authorized_keys file, you should be able to log in from your local machine to the remote server without being prompted for a password: ssh your_username@host_ip_address What’s Next? Exploring SSH’s Capabilities With your local device now linked to the remote system, you gain full access to its terminal. This means you can:\nTransfer files between systems effortlessly. Remotely execute commands with full control. Modify configurations and automate administrative tasks. The possibilities are endless!\nEnding Connection Once you are done with your work on th server end connection with:\nexit Conclusion SSH is more than just a remote access tool—it’s a powerhouse for secure, efficient, and flexible system management. Whether you\u0026rsquo;re a seasoned sysadmin or a budding developer, mastering SSH will enhance your workflow and bolster your security practices.\nSSH isn’t just a protocol—it’s your key to unlocking seamless, secure, and limitless remote computing!\nStay secure, and happy coding! 🚀\n","permalink":"http://localhost:1313/posts/ssh/","summary":"\u003cp\u003eIn today’s interconnected world, secure access to remote systems is a game-changer for administrators, developers, and IT professionals. Secure Shell (SSH) stands as the ultimate tool for establishing encrypted connections to remote machines over an unsecured network. This blog will walk you through SSH’s core concepts, its working mechanism, and how to make the most of it.\u003c/p\u003e\n\u003ch2 id=\"what-is-ssh\"\u003eWhat is SSH?\u003c/h2\u003e\n\u003cp\u003eSSH, or Secure Shell, is a cryptographic network protocol designed to enable secure communication between two devices. It replaces outdated protocols like Telnet and FTP, which transmit data in plain text, leaving them vulnerable to eavesdropping and cyber threats. With SSH, all data is encrypted, ensuring both privacy and security during transmission.\u003c/p\u003e","title":"Unlocking Secure Connections: A Dive into SSH"},{"content":"Are you seeking a streamlined alternative to traditional web content management? Dive into Hugo, a powerhouse static site generator (SSG) renowned for its exceptional speed and efficiency. Ideal for developers, writers, and entrepreneurs alike, Hugo simplifies the creation and upkeep of high-performance websites. Let\u0026rsquo;s explore Hugo\u0026rsquo;s core strengths, guide you through setting up your project, and walk through deploying it on GitHub.\nWhy Opt for Hugo? Hugo\u0026rsquo;s popularity stems from its robust features:\nBlazing Speed: Experience near-instantaneous site builds, ensuring optimal performance regardless of scale. Simplified Setup: Eliminate database complexities and intricate installations; Hugo operates locally and deploys smoothly to platforms like GitHub Pages, Netlify, and Vercel. Markdown Integration: Craft content effortlessly with intuitive Markdown syntax. Tailored Customization: Leverage a rich ecosystem of templates and themes to personalize your site with ease. SEO and Performance Enhancement: Benefit from built-in SEO tools, clean URLs, and structured data to elevate your site\u0026rsquo;s search engine visibility and performance. Intuitive Content Organization: Manage your content structure with remarkable ease and precision. Initiating Your Hugo Project Getting started with Hugo is a breeze. Follow these steps to kickstart your project:\n1- Installing Hugo Linux:\nsudo snap install hugo Note: We use the snap command instead of apt-get install because snap provides the latest version of Hugo, while apt-get might install an older version that could cause issues.\nmacOS:\nbrew install hugo Windows:\nDownload the appropriate binary from Hugo\u0026rsquo;s Releases.\n2- Project Creation Establish a new site:\nhugo new site my-project cd my-project 3- Theme Implementation Select a theme from Hugo Themes and integrate it:\ngit init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/hugo-PaperMod Update hugo.toml to include the theme:\ntheme = \u0026#34;hugo-PaperMod\u0026#34; 4- Content Creation Generate your first entry:\nhugo new posts/initial-entry.md Populate the content/posts Markdown file with your content.\n5- Local Preview Launch the local server:\nhugo server --noHTTPCache Note: Here we use the --noHTTPCache flag to avoid cache-related bugs that could affect the server.\nAccess your site at http://localhost:1313.\n6- Building Static Files Generate deployable files:\nhugo The public/ directory will contain your static HTML.\nDeploying to GitHub Pages 1- Repository Setup Navigate to GitHub. Create a new repository. Name it yourusername.github.io. 2- GitHub Actions Workflow Configuration Generate the workflow directory and .yaml file:\nmkdir -p .github/workflows cd .github/workflows touch hugo.yaml 3- Workflow Definition Edit hugo.yaml:\nname: Deploy Hugo site to GitHub Pages on: push: branches: - main workflow_dispatch: permissions: contents: read pages: write id-token: write concurrency: group: \u0026#34;github-pages\u0026#34; cancel-in-progress: false defaults: run: shell: bash jobs: build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.145.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${{ env.HUGO_VERSION }}/hugo_extended_${{ env.HUGO_VERSION }}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout Repository uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup GitHub Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js Dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build Hugo Site env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production run: | hugo --gc --minify --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload Site Artifacts uses: actions/upload-pages-artifact@v3 with: path: ./public deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 This workflow ensures:\nFully automated deployment (no manual uploads). The latest site version is always published. Optimization with caching \u0026amp; minification. Compatibility with Hugo themes \u0026amp; submodules. 4- Push and Deploy Execute from the root of your Hugo project:\ngit add . git commit -m \u0026#34;Initial site deployment\u0026#34; git remote add origin https://github.com/YOUR_GITHUB_USERNAME/YOUR_GITHUB_REPO.git git push -u origin main 5- Repository Pages Configuration Access \u0026lsquo;Settings\u0026rsquo; in your repository. Go to \u0026lsquo;Pages\u0026rsquo;. Set \u0026lsquo;Source\u0026rsquo; to GitHub Actions. 6- Deployment Verification In your GitHub repository, access \u0026lsquo;Actions\u0026rsquo;. Monitor the \u0026lsquo;Deploy Hugo site to GitHub Pages\u0026rsquo; workflow. A successful deployment will display a green status. 7- Accessing Your Live Site Visit:\nhttps://yourusername.github.io/ In Summary Hugo provides a powerful and efficient platform for building fast, scalable, and visually appealing websites. Its speed and ease of use make it a prime choice for various web projects. Embrace Hugo to transform your web development experience.\n","permalink":"http://localhost:1313/posts/hugo_site/","summary":"\u003cp\u003eAre you seeking a streamlined alternative to traditional web content management? Dive into Hugo, a powerhouse static site generator (SSG) renowned for its exceptional speed and efficiency. Ideal for developers, writers, and entrepreneurs alike, Hugo simplifies the creation and upkeep of high-performance websites. Let\u0026rsquo;s explore Hugo\u0026rsquo;s core strengths, guide you through setting up your project, and walk through deploying it on GitHub.\u003c/p\u003e\n\u003ch2 id=\"why-opt-for-hugo\"\u003eWhy Opt for Hugo?\u003c/h2\u003e\n\u003cp\u003eHugo\u0026rsquo;s popularity stems from its robust features:\u003c/p\u003e","title":"Launch Your Site Swiftly: Harnessing Hugo for Rapid Web Development"},{"content":" Introduction In the world of coding, keeping track of changes, collaborating with fellow developers, and ensuring that you never lose progress is crucial. That\u0026rsquo;s where Git and GitHub come in! Whether you\u0026rsquo;re a beginner or an experienced coder, mastering these tools can streamline your workflow and make software development a breeze.\nIn this blog, we’ll dive deep into what Git and GitHub are, why they’re important, and how to get started. Let\u0026rsquo;s explore the power of version control!\nWhat is GitHub? GitHub is an online version control platform that allows developers to store, track, and collaborate on coding projects. It acts as a hub where programmers can work together, contribute to open-source projects, and manage software efficiently.\nWhy Use GitHub? Have you ever edited a file, only to realize later that the previous version was better—but now it\u0026rsquo;s lost forever? 😱 That’s where GitHub saves the day! With GitHub, you can:\nTrack every version of your files so you never lose progress. Revert to an older version anytime if something goes wrong. Work with a team effortlessly using collaboration tools like pull requests and issues. Store your code safely in the cloud, preventing data loss. 💡 Fun Fact: GitHub is home to millions of open-source projects and developers worldwide, making it one of the largest developer communities! 🚀\nGetting Started with GitHub To get started with GitHub:\nSign up at GitHub.com 📝 Set up your profile (add a picture, bio, and links) Explore repositories and start collaborating! Once you\u0026rsquo;re inside GitHub, you\u0026rsquo;ll come across some essential terms:\nRepository (Repo): A folder that contains your project\u0026rsquo;s files and their history. Branch: A separate version of your project where you can make changes without affecting the main version. Commit: A snapshot of your changes, like saving progress in a game. Push: Uploading changes from your local computer to GitHub. Merge: Combining changes from one branch into another. Issue: A way to track bugs, feature requests, and improvements. Personal Access Token: A secure authentication key used instead of a password for Git operations. How Git and GitHub Work Together GitHub is a web-based service, but Git is the command-line tool that powers it. Git is a distributed version control system that allows you to:\nTrack changes in files Work on different branches simultaneously Merge and collaborate on projects Keep a local copy of your entire repository Think of Git as the engine and GitHub as the user-friendly interface where everything is stored and shared! 🚀\nHow to Use Git? To use Git, follow these steps:\n1️ Install Git On Linux:\nsudo apt-get install git On macOS:\nbrew install git On Windows:\nDownload and install from git-scm.com After installing, check if it is available:\ngit --version 2️ Set Up Git After installation, configure your Git identity:\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your.email@example.com\u0026#34; To verify your identity, run:\ngit config --list 3️ Create a GitHub Repository Go to GitHub and click New Repository Give it a name and choose public or private Copy the repository URL 4️ Clone the Repository Locally git clone https://github.com/your-username/your-repo.git 5️ Make Changes and Commit Modify files, then track and save changes:\ngit add . # Stages all changes git commit -m \u0026#34;Added a new feature\u0026#34; 6️ Push Changes to GitHub git push -u origin main Your code is now live on GitHub! 🎉\nConclusion Git and GitHub are powerful tools that every developer should master. By learning how to manage repositories, work with branches, and collaborate through pull requests, you can boost your productivity and coding efficiency.\nSo, what’s next? Create your first repository, explore GitHub, or contribute to an open-source project! 🚀\n","permalink":"http://localhost:1313/posts/git_github/","summary":"\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn the world of coding, keeping track of changes, collaborating with fellow developers, and ensuring that you never lose progress is crucial. That\u0026rsquo;s where \u003cstrong\u003eGit\u003c/strong\u003e and \u003cstrong\u003eGitHub\u003c/strong\u003e come in! Whether you\u0026rsquo;re a beginner or an experienced coder, mastering these tools can \u003cstrong\u003estreamline your workflow\u003c/strong\u003e and make software development a breeze.\u003c/p\u003e\n\u003cp\u003eIn this blog, we’ll dive deep into \u003cstrong\u003ewhat Git and GitHub are, why they’re important, and how to get started\u003c/strong\u003e. Let\u0026rsquo;s explore the power of version control!\u003c/p\u003e","title":"Hack Your Productivity with Git \u0026 GitHub: A Must-Read Guide"},{"content":"my first post\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003cp\u003emy first post\u003c/p\u003e","title":"My First Post"},{"content":"","permalink":"http://localhost:1313/about/","summary":"about","title":"About Me"},{"content":"Ever wondered how your operating system, the very foundation of your digital world, comes to life? At its heart lies the kernel, the core program that manages your computer\u0026rsquo;s resources, from the CPU and memory to peripherals. While most users interact with their OS through a user-friendly interface, the kernel operates behind the scenes, diligently orchestrating everything.\nBut how does this essential piece of software get built and tailored to your specific hardware? The answer lies in kernel compilation.\nFor many, the term \u0026ldquo;kernel compilation\u0026rdquo; might sound intimidating, conjuring images of arcane command-line incantations and hours spent staring at scrolling text. And while it can indeed be a deep dive, the underlying principles are quite logical, and the benefits of a custom-built kernel can be significant.\nWhat Is Kernel Compilation? Kernel compilation is the process of building the operating system kernel from its source code into a binary form that your computer can run. The kernel is the core part of an operating system, responsible for managing hardware, memory, processes, and system calls.\nWhy Compile Your Own Kernel? You might be asking yourself, \u0026ldquo;Why bother compiling a kernel when my distribution already provides one?\u0026rdquo; That\u0026rsquo;s a valid question. For most everyday users, the generic kernels provided by distributions work perfectly well. However, there are compelling reasons why one might venture down the path of compilation:\nAdding or Removing Hardware Support Generic kernels are built with a wide array of drivers to support diverse hardware. However, if you have very specific or older hardware, or conversely, want to strip out support for devices you\u0026rsquo;ll never use, compiling your own kernel allows you to precisely add or remove hardware support. This ensures your kernel only includes the necessary drivers.\nEnabling or Disabling Specific Features The Linux kernel is highly modular, offering a vast range of features. Compilation grants you the power to enable or disable specific features according to your needs. This could involve enabling advanced networking protocols, file system options, or security enhancements that aren\u0026rsquo;t active by default. Conversely, you might want to disable features you deem unnecessary or potentially insecure.\nApplying Patches or Security Fixes Sometimes, crucial patches or security fixes are released for the kernel that haven\u0026rsquo;t yet made their way into your distribution\u0026rsquo;s stable releases. Compiling your own kernel allows you to apply these updates promptly, ensuring your system is up-to-date and secure.\nOptimizing for Performance or Size By compiling a kernel specifically for your hardware, you can enable optimizations that aren\u0026rsquo;t present in a generic build. This can lead to noticeable improvements in performance and responsiveness. Furthermore, selecting only the necessary drivers and features results in a smaller kernel size, potentially lowering memory usage and boot times.\nLearning and Experimentation The process of compiling a kernel provides invaluable insight into the inner workings of your operating system and the hardware it interacts with. It\u0026rsquo;s a fantastic way to deepen your learning and understanding of computer science. For developers and enthusiasts, compiling custom kernels opens doors for experimentation with new features, patches, and kernel versions.\nLet Us Go Down the Path of Kernel Compilation This blog will provide you with an overview of how kernel compilation works.\nStep 1: Completing Requirements To compile your kernel, your system requires some essential tools, libraries, and headers. To get those for your system, run the following commands:\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y This ensures that the packages we are downloading are in their latest updated versions.\nsudo apt install -y build-essential libncurses-dev flex bison libelf-dev libssl-dev This command is for Debian-based distributions like Ubuntu.\nStep 2: Kernel Source Before getting your kernel source, let’s first find out your current kernel version and the number of processors your system has:\nuname -r nproc To get the latest stable version of the Linux kernel, visit:\nhttps://kernel.org\nDownload the latest stable version of the Linux kernel source in tarball (.tar.xz) format.\nStep 3: Extraction of the Source Extract the kernel source:\ntar xf linux-6.9.2.tar.xz cd linux-6.9.2 Before moving to the next step, use the command:\nmake mrproper This command is a clean-up command used in the Linux kernel build system — it removes all generated files, configuration files, and backups to return the source tree to a pristine, freshly-unpacked state.\nNote: You use make mrproper before kernel compilation mainly to ensure a clean, reliable build environment — avoiding issues caused by leftover files from previous builds.\nStep 4: Kernel Configuration There are three ways to configure your kernel:\n1. Default Configuration Use this method if you are just trying out kernel compilation or if you need your kernel to configure without any hassle. It uses default configurations recommended by the kernel maintainers:\nmake defconfig 2. Use Old Kernel Config If you want to copy the configurations of your older kernel and update those configurations for the new kernel options, use:\nmake oldconfig 3. Manual Configuration If you want to configure your kernel manually to modify it as needed, use:\nmake menuconfig This will pop up a text based menu for kernel configurations that you can set up according to your preferences.\nStep 5: Building the Kernel To build the kernel, run:\nmake -j$(nproc) This tells make to run up to the number of jobs equal to the number of processors. If you have a number of them, use them all.\nThis might take some time, but if everything goes well, your patience will be rewarded.\nStep 6: Installation To install the kernel modules, run:\nsudo make modules_install To install the kernel, run:\nsudo make install Step 7: GRUB Modification Customize the GRUB bootloader by increasing the GRUB timeout.\nMake sure these lines are set in /etc/default/grub:\nGRUB_TIMEOUT=5 GRUB_TIMEOUT_STYLE=menu After customizing, update GRUB with:\nsudo update-grub Step 8: Testing Reboot your system to test your new kernel. Once rebooted, run:\nuname -r To check the version.\nDone: You Have Compiled and Booted Your Own Kernel Congratulations. You have successfully compiled and installed a Linux kernel from source. Now you can:\nTweak performance Add support for niche hardware Try experimental kernel features Gain a deeper understanding of Linux ","permalink":"http://localhost:1313/posts/kernel_compilation/","summary":"\u003cp\u003eEver wondered how your operating system, the very foundation of your digital world, comes to life? At its heart lies the kernel, the core program that manages your computer\u0026rsquo;s resources, from the CPU and memory to peripherals. While most users interact with their OS through a user-friendly interface, the kernel operates behind the scenes, diligently orchestrating everything.\u003c/p\u003e\n\u003cp\u003eBut how does this essential piece of software get built and tailored to your specific hardware? The answer lies in kernel compilation.\u003c/p\u003e","title":"Demystifying the Kernel: A Journey into Compilation"},{"content":"In today’s interconnected world, secure access to remote systems is a game-changer for administrators, developers, and IT professionals. Secure Shell (SSH) stands as the ultimate tool for establishing encrypted connections to remote machines over an unsecured network. This blog will walk you through SSH’s core concepts, its working mechanism, and how to make the most of it.\nWhat is SSH? SSH, or Secure Shell, is a cryptographic network protocol designed to enable secure communication between two devices. It replaces outdated protocols like Telnet and FTP, which transmit data in plain text, leaving them vulnerable to eavesdropping and cyber threats. With SSH, all data is encrypted, ensuring both privacy and security during transmission.\nHow Does SSH Work? SSH operates on a client-server model. Here’s a simple breakdown of how it functions:\nClient Initiation: The SSH client initiates a secure connection request to the SSH server. Authentication: The server verifies the client\u0026rsquo;s identity through passwords or SSH key authentication. Encryption: Once authenticated, SSH encrypts the session using secure algorithms like AES or ChaCha20. Secure Interaction: Users can now execute remote commands, transfer files, and establish tunneling, all within a protected environment. Fun Fact: The default SSH port is 22, but security-conscious users often change it to something else to prevent automated attacks!\nSetting Up a Secure SSH Connection Before establishing an SSH connection, ensure both your local and remote devices have an SSH server and client installed. On Linux-based systems, OpenSSH is the go-to open-source tool, accessible through the terminal.\nInstalling the SSH Client To install the SSH client on Debian-based or Ubuntu systems, open the terminal and run:\nsudo apt-get install openssh-client To confirm successful installation, type:\nssh Once installed, you can securely connect to any active SSH server.\nInstalling the SSH Server For remote access, the target device must have an SSH server installed and actively running to accept connections.\nTo install the SSH server, use:\nsudo apt-get install openssh-server To check if the SSH server is running, enter:\nsudo systemctl status sshd Once the SSH server is up and running, your device is ready to accept remote connections.\nEstablishing an SSH Connection Open a terminal on your local machine. Retrieve the IP address of your remote system by running: ip a Use the following command, replacing \u0026lt;your_username\u0026gt; and \u0026lt;host_ip_address\u0026gt; with the actual values: ssh your_username@host_ip_address If your local and remote usernames match, simply use:\nssh host_ip_address Press Enter, then provide the password when prompted. Note: Both the client and server devices must be on the same network for a successful connection.\nSuccess! You’re Now Securely Connected! Congratulations! You have now successfully established a secure SSH connection to the remote server.\nPasswordless SSH Login: Speed and Security Combined Tired of typing your password every time you connect via SSH? You can streamline the process and enhance security by setting up passwordless SSH login using SSH key pairs. This method eliminates the need to enter your password repeatedly while still maintaining a secure connection.\nHow Does It Work? SSH key authentication works by generating a pair of cryptographic keys:\nPrivate Key: Stays securely on your local machine. Public Key: Placed on the remote server. When you attempt to connect, the remote server uses your public key to verify your private key without exposing any credentials.\nSteps to Set Up Passwordless SSH Generate SSH Key Pair on Your Local Machine\nRun the following command:\nssh-keygen -t ed25519 -C \u0026#34;SShkey\u0026#34; Copying the Public Key to the Remote Server There are several ways to copy your public key to the remote server. One convenient method, if you have password-based SSH access already configured, is to use the ssh-copy-id command:\nssh-copy-id your_username@host_ip_address Replace your_username and host_ip_address with your remote username and the IP address of the remote server. You will be prompted for your password on the remote server. This command will append your public key to the ~/.ssh/authorized_keys file on the remote server.\nLogging in Without a Password Once the public key is successfully copied to the remote server\u0026rsquo;s authorized_keys file, you should be able to log in from your local machine to the remote server without being prompted for a password: ssh your_username@host_ip_address What’s Next? Exploring SSH’s Capabilities With your local device now linked to the remote system, you gain full access to its terminal. This means you can:\nTransfer files between systems effortlessly. Remotely execute commands with full control. Modify configurations and automate administrative tasks. The possibilities are endless!\nEnding Connection Once you are done with your work on th server end connection with:\nexit Conclusion SSH is more than just a remote access tool—it’s a powerhouse for secure, efficient, and flexible system management. Whether you\u0026rsquo;re a seasoned sysadmin or a budding developer, mastering SSH will enhance your workflow and bolster your security practices.\nSSH isn’t just a protocol—it’s your key to unlocking seamless, secure, and limitless remote computing!\nStay secure, and happy coding! 🚀\n","permalink":"http://localhost:1313/posts/ssh/","summary":"\u003cp\u003eIn today’s interconnected world, secure access to remote systems is a game-changer for administrators, developers, and IT professionals. Secure Shell (SSH) stands as the ultimate tool for establishing encrypted connections to remote machines over an unsecured network. This blog will walk you through SSH’s core concepts, its working mechanism, and how to make the most of it.\u003c/p\u003e\n\u003ch2 id=\"what-is-ssh\"\u003eWhat is SSH?\u003c/h2\u003e\n\u003cp\u003eSSH, or Secure Shell, is a cryptographic network protocol designed to enable secure communication between two devices. It replaces outdated protocols like Telnet and FTP, which transmit data in plain text, leaving them vulnerable to eavesdropping and cyber threats. With SSH, all data is encrypted, ensuring both privacy and security during transmission.\u003c/p\u003e","title":"Unlocking Secure Connections: A Dive into SSH"},{"content":"Are you seeking a streamlined alternative to traditional web content management? Dive into Hugo, a powerhouse static site generator (SSG) renowned for its exceptional speed and efficiency. Ideal for developers, writers, and entrepreneurs alike, Hugo simplifies the creation and upkeep of high-performance websites. Let\u0026rsquo;s explore Hugo\u0026rsquo;s core strengths, guide you through setting up your project, and walk through deploying it on GitHub.\nWhy Opt for Hugo? Hugo\u0026rsquo;s popularity stems from its robust features:\nBlazing Speed: Experience near-instantaneous site builds, ensuring optimal performance regardless of scale. Simplified Setup: Eliminate database complexities and intricate installations; Hugo operates locally and deploys smoothly to platforms like GitHub Pages, Netlify, and Vercel. Markdown Integration: Craft content effortlessly with intuitive Markdown syntax. Tailored Customization: Leverage a rich ecosystem of templates and themes to personalize your site with ease. SEO and Performance Enhancement: Benefit from built-in SEO tools, clean URLs, and structured data to elevate your site\u0026rsquo;s search engine visibility and performance. Intuitive Content Organization: Manage your content structure with remarkable ease and precision. Initiating Your Hugo Project Getting started with Hugo is a breeze. Follow these steps to kickstart your project:\n1- Installing Hugo Linux:\nsudo snap install hugo Note: We use the snap command instead of apt-get install because snap provides the latest version of Hugo, while apt-get might install an older version that could cause issues.\nmacOS:\nbrew install hugo Windows:\nDownload the appropriate binary from Hugo\u0026rsquo;s Releases.\n2- Project Creation Establish a new site:\nhugo new site my-project cd my-project 3- Theme Implementation Select a theme from Hugo Themes and integrate it:\ngit init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/hugo-PaperMod Update hugo.toml to include the theme:\ntheme = \u0026#34;hugo-PaperMod\u0026#34; 4- Content Creation Generate your first entry:\nhugo new posts/initial-entry.md Populate the content/posts Markdown file with your content.\n5- Local Preview Launch the local server:\nhugo server --noHTTPCache Note: Here we use the --noHTTPCache flag to avoid cache-related bugs that could affect the server.\nAccess your site at http://localhost:1313.\n6- Building Static Files Generate deployable files:\nhugo The public/ directory will contain your static HTML.\nDeploying to GitHub Pages 1- Repository Setup Navigate to GitHub. Create a new repository. Name it yourusername.github.io. 2- GitHub Actions Workflow Configuration Generate the workflow directory and .yaml file:\nmkdir -p .github/workflows cd .github/workflows touch hugo.yaml 3- Workflow Definition Edit hugo.yaml:\nname: Deploy Hugo site to GitHub Pages on: push: branches: - main workflow_dispatch: permissions: contents: read pages: write id-token: write concurrency: group: \u0026#34;github-pages\u0026#34; cancel-in-progress: false defaults: run: shell: bash jobs: build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.145.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${{ env.HUGO_VERSION }}/hugo_extended_${{ env.HUGO_VERSION }}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Install Dart Sass run: sudo snap install dart-sass - name: Checkout Repository uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Setup GitHub Pages id: pages uses: actions/configure-pages@v5 - name: Install Node.js Dependencies run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: Build Hugo Site env: HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache HUGO_ENVIRONMENT: production run: | hugo --gc --minify --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload Site Artifacts uses: actions/upload-pages-artifact@v3 with: path: ./public deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v4 This workflow ensures:\nFully automated deployment (no manual uploads). The latest site version is always published. Optimization with caching \u0026amp; minification. Compatibility with Hugo themes \u0026amp; submodules. 4- Push and Deploy Execute from the root of your Hugo project:\ngit add . git commit -m \u0026#34;Initial site deployment\u0026#34; git remote add origin https://github.com/YOUR_GITHUB_USERNAME/YOUR_GITHUB_REPO.git git push -u origin main 5- Repository Pages Configuration Access \u0026lsquo;Settings\u0026rsquo; in your repository. Go to \u0026lsquo;Pages\u0026rsquo;. Set \u0026lsquo;Source\u0026rsquo; to GitHub Actions. 6- Deployment Verification In your GitHub repository, access \u0026lsquo;Actions\u0026rsquo;. Monitor the \u0026lsquo;Deploy Hugo site to GitHub Pages\u0026rsquo; workflow. A successful deployment will display a green status. 7- Accessing Your Live Site Visit:\nhttps://yourusername.github.io/ In Summary Hugo provides a powerful and efficient platform for building fast, scalable, and visually appealing websites. Its speed and ease of use make it a prime choice for various web projects. Embrace Hugo to transform your web development experience.\n","permalink":"http://localhost:1313/posts/hugo_site/","summary":"\u003cp\u003eAre you seeking a streamlined alternative to traditional web content management? Dive into Hugo, a powerhouse static site generator (SSG) renowned for its exceptional speed and efficiency. Ideal for developers, writers, and entrepreneurs alike, Hugo simplifies the creation and upkeep of high-performance websites. Let\u0026rsquo;s explore Hugo\u0026rsquo;s core strengths, guide you through setting up your project, and walk through deploying it on GitHub.\u003c/p\u003e\n\u003ch2 id=\"why-opt-for-hugo\"\u003eWhy Opt for Hugo?\u003c/h2\u003e\n\u003cp\u003eHugo\u0026rsquo;s popularity stems from its robust features:\u003c/p\u003e","title":"Launch Your Site Swiftly: Harnessing Hugo for Rapid Web Development"},{"content":" Introduction In the world of coding, keeping track of changes, collaborating with fellow developers, and ensuring that you never lose progress is crucial. That\u0026rsquo;s where Git and GitHub come in! Whether you\u0026rsquo;re a beginner or an experienced coder, mastering these tools can streamline your workflow and make software development a breeze.\nIn this blog, we’ll dive deep into what Git and GitHub are, why they’re important, and how to get started. Let\u0026rsquo;s explore the power of version control!\nWhat is GitHub? GitHub is an online version control platform that allows developers to store, track, and collaborate on coding projects. It acts as a hub where programmers can work together, contribute to open-source projects, and manage software efficiently.\nWhy Use GitHub? Have you ever edited a file, only to realize later that the previous version was better—but now it\u0026rsquo;s lost forever? 😱 That’s where GitHub saves the day! With GitHub, you can:\nTrack every version of your files so you never lose progress. Revert to an older version anytime if something goes wrong. Work with a team effortlessly using collaboration tools like pull requests and issues. Store your code safely in the cloud, preventing data loss. 💡 Fun Fact: GitHub is home to millions of open-source projects and developers worldwide, making it one of the largest developer communities! 🚀\nGetting Started with GitHub To get started with GitHub:\nSign up at GitHub.com 📝 Set up your profile (add a picture, bio, and links) Explore repositories and start collaborating! Once you\u0026rsquo;re inside GitHub, you\u0026rsquo;ll come across some essential terms:\nRepository (Repo): A folder that contains your project\u0026rsquo;s files and their history. Branch: A separate version of your project where you can make changes without affecting the main version. Commit: A snapshot of your changes, like saving progress in a game. Push: Uploading changes from your local computer to GitHub. Merge: Combining changes from one branch into another. Issue: A way to track bugs, feature requests, and improvements. Personal Access Token: A secure authentication key used instead of a password for Git operations. How Git and GitHub Work Together GitHub is a web-based service, but Git is the command-line tool that powers it. Git is a distributed version control system that allows you to:\nTrack changes in files Work on different branches simultaneously Merge and collaborate on projects Keep a local copy of your entire repository Think of Git as the engine and GitHub as the user-friendly interface where everything is stored and shared! 🚀\nHow to Use Git? To use Git, follow these steps:\n1️ Install Git On Linux:\nsudo apt-get install git On macOS:\nbrew install git On Windows:\nDownload and install from git-scm.com After installing, check if it is available:\ngit --version 2️ Set Up Git After installation, configure your Git identity:\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your.email@example.com\u0026#34; To verify your identity, run:\ngit config --list 3️ Create a GitHub Repository Go to GitHub and click New Repository Give it a name and choose public or private Copy the repository URL 4️ Clone the Repository Locally git clone https://github.com/your-username/your-repo.git 5️ Make Changes and Commit Modify files, then track and save changes:\ngit add . # Stages all changes git commit -m \u0026#34;Added a new feature\u0026#34; 6️ Push Changes to GitHub git push -u origin main Your code is now live on GitHub! 🎉\nConclusion Git and GitHub are powerful tools that every developer should master. By learning how to manage repositories, work with branches, and collaborate through pull requests, you can boost your productivity and coding efficiency.\nSo, what’s next? Create your first repository, explore GitHub, or contribute to an open-source project! 🚀\n","permalink":"http://localhost:1313/posts/git_github/","summary":"\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn the world of coding, keeping track of changes, collaborating with fellow developers, and ensuring that you never lose progress is crucial. That\u0026rsquo;s where \u003cstrong\u003eGit\u003c/strong\u003e and \u003cstrong\u003eGitHub\u003c/strong\u003e come in! Whether you\u0026rsquo;re a beginner or an experienced coder, mastering these tools can \u003cstrong\u003estreamline your workflow\u003c/strong\u003e and make software development a breeze.\u003c/p\u003e\n\u003cp\u003eIn this blog, we’ll dive deep into \u003cstrong\u003ewhat Git and GitHub are, why they’re important, and how to get started\u003c/strong\u003e. Let\u0026rsquo;s explore the power of version control!\u003c/p\u003e","title":"Hack Your Productivity with Git \u0026 GitHub: A Must-Read Guide"},{"content":"my first post\n","permalink":"http://localhost:1313/posts/my-first-post/","summary":"\u003cp\u003emy first post\u003c/p\u003e","title":"My First Post"},{"content":"","permalink":"http://localhost:1313/about/","summary":"about","title":"About Me"}]